--source include/galera_cluster.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc
#
# Test 6: Execute update until lock_rec_unlock and two non-conflict CTAS
#
--connection node_1
CREATE TABLE t1(a int not null primary key, b int, c int) engine=InnoDB;
INSERT INTO t1 VALUES (1,1,1),(2,2,1),(3,1,1),(4,2,2),(5,2,2),(6,1,1),(7,2,2),(8,1,1),(9,1,1);
#
# connection node_1b is for controlling debug sync points
# first set a sync point to lock_rec_unlock
#
--connect node_1b, 127.0.0.1, root, , test, $NODE_MYPORT_1
--connection node_1b
SET GLOBAL debug_dbug = "d,sync.before_lock_rec_unlock";
#
# Now send UPDATE-statement that will use full table scan and update only
# rows with b = 2. Execution of this update will pause at lock_rec_unlock
#
--connect node_1d, 127.0.0.1, root, , test, $NODE_MYPORT_1
--connection node_1d
SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;
BEGIN;
--send UPDATE t1 SET c = 5 WHERE b = 2;
#
# Wait until we have reached lock_rec_unlock
#
--connection node_1b
SET SESSION DEBUG_SYNC='now WAIT_FOR sync.before_lock_rec_unlock_reached';
#
# Now we send CTAS1
#
--connect node_1c, 127.0.0.1, root, , test, $NODE_MYPORT_1
--connection node_1c
--send CREATE TABLE t2 AS SELECT * FROM t1 FOR UPDATE;
#
# Now we send CTAS2
#
--connect node_1e, 127.0.0.1, root, , test, $NODE_MYPORT_1
--connection node_1e
--send CREATE TABLE t3 AS SELECT * FROM t1 FOR UPDATE;
#
# Continue first update at lock_rec_unlock
#
--connection node_1b
SET GLOBAL debug_dbug = "";
SET DEBUG_SYNC = "now SIGNAL signal.before_lock_rec_unlock";

--connection node_1d
--reap
--connection node_1c
--error 1205
--reap
--connection node_1e
--error 1205
--reap

--connection node_1b
SET DEBUG_SYNC = "RESET";

--connection node_1
SHOW CREATE TABLE t1;
SELECT * FROM t1;
DROP TABLE t1;

--disconnect node_1b
--disconnect node_1c
--disconnect node_1d
--disconnect node_1e


